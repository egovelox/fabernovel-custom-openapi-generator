openapi: 3.0.1
info:
  title: Gestion Stocks
  version: ${GESTION_STOCKS_VERSION}
servers:
  - url: ${GESTION_STOCKS_URL}
paths:
  /gestion-stocks/health:
    post:
      tags:
        - appInfo
      operationId: postHealth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Health'
      responses:
        200:
          description: "Route used to know if the api is up and running"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Health'
    get:
      tags:
        - appInfo
      operationId: health
      responses:
        200:
          description: "Route used to know if the api is up and running"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Health'
  /gestion-stocks/version:
    get:
      tags:
        - appInfo
      operationId: version
      responses:
        200:
          description: "Route used to know if the api module version"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Version'
  /transfert-request:
    get:
      tags:
        - transfertRequest
      summary: "Find all request of transfert of a product"
      description: "Find all request of transfert of a product. You can use various filter, the list is paginated"
      operationId: transfertRequest
      parameters:
        - name: lang
          description: Language code that need to be considered for filter
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Language"
        - name: filters.storeId
          description: "StoreId value that needs to be considered for filter"
          in: query
          required: false
          schema:
            type: string
        - name: filters.department
          description: "Department Id value that needs to be considered for filter"
          in: query
          required: false
          schema:
            type: string
        - name: filters.status
          in: query
          description: "Status values that need to be considered for filter"
          required: true
          schema:
            type: array
            items:
              type: string
              enum:
                - "open"
                - "pending"
                - "close"
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transfert_Request_Response'
        '400':
          description: 'wrong use of the api, please check your params'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Global_Error_Response'
  /example/get-union-type:
    get:
      tags:
        - getUnionType
      operationId: getUnionType
      responses:
        '200':
          description: returns union type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Union_Type'
  /example/test-with-path-params/{a}/{b}:
    parameters:
      - name: a
        in: path
        schema:
          type: string
        required: true
      - name: b
        in: path
        schema:
          type: string
        required: true
    get:
      tags:
        - getMultipleParams
      operationId: getMultipleParams
      responses:
        204:
          description: ''


components:
  schemas:
    Health:
      title: Health
      type: object
      properties:
        status:
          type: string
      required:
        - status
    Version:
      title: Version
      type: object
      properties:
        version:
          type: string
      required:
        - version
    Global_Error_Response:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
        message:
          type: string
    Language:
      type: string
      enum: ["fr", "en", "de", "it"]
    Transfert_Request:
      type: object
      required:
        - departments
        - creationDate
        - internalReference
        - documentNumber
        - product
        - id
      properties:
        departments:
          type: array
          items:
            type: string
        creationDate:
          type: string
          format: date-time
        limitDate:
          type: string
          format: date
        internalReference:
          type: string
        documentNumber:
          type: integer
        product:
          $ref: '#/components/schemas/Product'
        id:
          type: string
          pattern: '[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}'
    Product:
      type: object
      required:
        - departmentLabel
        - quantity
        - description
        - sku
        - id
      properties:
        departmentLabel:
          type: string
        quantity:
          type: integer
        description:
          type: string
        sku:
          type: string
        color:
          type: string
        size:
          type: string
        id:
          type: string
          pattern: '[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}'
    Transfert_Request_Response:
      type: object
      properties:
        hasPreviousPage:
          type: boolean
          nullable: false
        hasNextPage:
          type: boolean
          nullable: false
        totalCount:
          type: integer
          nullable: false
        totalPages:
          type: integer
          nullable: false
        page:
          type: integer
          nullable: false
        limit:
          type: integer
          nullable: false
        result:
          type: array
          items:
            $ref: '#/components/schemas/Transfert_Request'
    Union_Type:
      anyOf:
        - type: object
          properties:
            status:
              type: "string"
              enum: ["PENDING"]
            value:
              type: integer
          required:
            - "type"
            - "value"
        - type: object
          properties:
            status:
              type: "string"
              enum: ["ACCEPTED"]
            field1:
              type: string
            acceptedAt:
              type: string
          required:
            - "type"
            - "field1"
    MergedType:
      allOf:
        - $ref: '#/components/schemas/Transfert_Request'
        - type: object
          properties:
            meta:
              type: object
              properties:
                averageResponseType:
                  type: number
